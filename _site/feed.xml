<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/" rel="alternate" type="text/html" /><updated>2025-06-22T23:46:25+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/feed.xml</id><title type="html">Clean Blog</title><subtitle>A Blog Theme by Start Bootstrap</subtitle><author><name>Start Bootstrap</name></author><entry><title type="html">DevOps</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/devops/2025/06/21/devops.html" rel="alternate" type="text/html" title="DevOps" /><published>2025-06-21T22:00:00+09:00</published><updated>2025-06-21T22:00:00+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/devops/2025/06/21/devops</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/devops/2025/06/21/devops.html"><![CDATA[<h1 id="1-devops">1. DevOps</h1>

<h2 id="1-1-과거와-현재">1-1. 과거와 현재</h2>

<ul>
  <li>과거에는 새로운 서비스 출시를 위해 오랜 시간 개발하고 배포하는데 많은 시간을 소요해야 했다.(코드개발, 테스트 등)</li>
  <li>전통적인 개발 및 서비스 인도까지의 프로세스는 어느 팀도 제품 전체의 완료를 책임지지 않는다.
    <ul>
      <li><strong>개발팀</strong>에게 ‘완료’의 의미는 <strong>요구사항을 구현</strong>하는 것이다.</li>
      <li><strong>QA팀</strong>에게 ‘완료’의 의미는 <strong>코드를 테스트</strong>하는 것이다.</li>
      <li><strong>운영팀</strong>에게 ‘완료’의 의미는 <strong>코드를 릴리스</strong>하는 것이다.</li>
    </ul>
  </li>
  <li>현재는 서비스 출시 속도가 빠르고 업데이트 주기가 빈번하다.</li>
  <li>현재의 트렌드에 맞게 개발된 소프트웨어가 <strong>안정성을 유지</strong>하면서도 사용자에게 <strong>신속하게 제공</strong>될 수 있도록 개발, 테스트, 배포, 운영의 업무 사이클을 자동화된 하나의 프로세스로 통합할 필요성이 생겼다.</li>
</ul>

<h2 id="1-2-devops란">1-2. DevOps란</h2>

<aside> 💡 단절된 개발과 운영 간의 프로세스를 원활하게 연결하고 자동화 방법을 통해 효율성을 극대화하는 방법(서로 다른 업무의 통합)이다. DevOps는 소프트웨어 개발(Dev)과 IT 운영(Ops)의 경계를 허물고, 지속적인 통합(CI), 지속적인 배포(CD), 자동화 등을 통해 더 빠른 소프트웨어 개발과 더 높은 운영 효율을 달성하려는 문화, 움직임, 관행의 집합이다.

</aside>

<h2 id="1-3-devops의-핵심-요소cams">1-3. DevOps의 핵심 요소(CAMS)</h2>

<aside> 💡 DevOps의 핵심 원칙을 나타내는 약어로, Culture (문화), Automation (자동화), Measurement (측정), Sharing (공유)의 첫 글자를 따서 만들어졌다. 이 네 가지 요소는 DevOps가 추구하는 가치와 실천 방식이다.

</aside>

<ol>
  <li><strong>Culture(문화)</strong> : DevOps 문화는 협업과 의사소통을 중시한다. 개발(Dev) 팀과 운영(Ops) 팀 간의 장벽을 허물고, 모든 이해관계자가 목표 달성을 위해 긴밀하게 협력하도록 장려하는 문화이다. 이는 조직 내 신뢰 구축, 공통 목표에 대한 집중, 지속적인 개선을 추구하는 환경을 조성한다. (각 부서 또는 조직이 본인들의 이익만을 우선시하는 사일로화 되는 것을 방지해야 한다.)</li>
  <li><strong>Automation(자동화)</strong> : DevOps에서는 반복 가능하고 예측 가능한 작업을 자동화함으로써, 수동 작업의 오류를 줄이고 효율성을 높인다. 인프라 관리, 코드 배포, 테스트 실행, 모니터링 등 다양한 프로세스에 자동화를 적용한다. 자동화를 통해 개발부터 배포까지의 프로세스가 더 빠르고, 안정적이며, 효율적으로 이루어진다. (작업자의 실수를 예방하고 서비스의 일관성을 유지한다.)</li>
  <li><strong>Measurement(측정)</strong> : 성능, 프로세스, 효과성을 정량적으로 측정하고 분석하는 것을 강조한다. 이는 개선점을 식별하고, 의사 결정 과정에 필요한 데이터를 제공한다. DevOps에서는 지속적인 측정과 피드백이 중요하며, 시스템의 성능, 응답 시간, 버그 발생 빈도 등을 모니터링하고, 이를 기반으로 지속적인 개선을 도모한다. (측정할 수 없으면 관리할 수 없고 관리할 수 없으면 개선 시킬 수 없다.)</li>
  <li><strong>Sharing(공유)</strong> : 지식, 아이디어, 성공 사례뿐만 아니라 실패 경험까지 공유하는 것을 중요시한다. 이는 학습과 성장을 촉진하고, 조직 전체의 개선을 위한 아이디어와 해결책을 발굴하는 데 도움이 된다. 공유 문화는 DevOps의 핵심 요소 중 하나로, 팀 간의 벽을 허물고 조직 전체가 하나의 목표를 향해 나아가도록 한다. (협업 툴을 충분히 활용해야 한다.)</li>
</ol>

<h2 id="1-4-소프트웨어-개발아키텍처배포인프라-패러다임의-진화">1-4. 소프트웨어 개발/아키텍처/배포/인프라 패러다임의 진화</h2>

<ul>
  <li>1980년대까지 개발 프로세스는 주로 워터폴 모델을 따랐고, 애플리케이션은 일체형(모놀리식) 아키텍처로 구축되었다. 이러한 애플리케이션들은 물리적 서버에 배포되고, 데이터센터 환경에서 운영되었다.</li>
  <li>1990년대에는 애자일 개발 방법론이 소개되면서 개발 프로세스가 점차 변화하기 시작했다. 아키텍처는 N-계층으로 발전하여 더 모듈화된 구조를 갖게 되었고, 가상 서버 기술이 등장하여 배포와 패키징에 변화를 가져왔다. 이 시기에는 호스팅 서비스가 인기를 얻기 시작했다.</li>
  <li>2000년대에 들어서면서 DevOps 운동이 시작되었다. 이는 개발과 운영의 경계를 허물고, CI/CD의 개념을 통해 지속적인 통합과 배포를 중요시했다. 마이크로서비스 아키텍처가 등장하여 서비스들이 더 작고 독립적인 단위로 분리되었고, 컨테이너 기술이 배포 방법을 혁신했다.</li>
</ul>

<h2 id="1-5-devops-toolchain">1-5. DevOps Toolchain</h2>

<ul>
  <li><strong>소스 코드 관리</strong>: Git, GitHub 등</li>
  <li><strong>CI 서버</strong>: Jenkins, GitHub Actions 등
    <ul>
      <li>빌드, 테스트, 배포 과정의 자동화 서버</li>
    </ul>
  </li>
  <li><strong>컨테이너·이미지 관리</strong>: Docker, AWS ECR 등
    <ul>
      <li>애플리케이션과 그 종속성을 격리된 환경인 컨테이너에 담아 실행</li>
      <li>애플리케이션의 실행 환경을 코드화하고, 다른 환경에서도 동일한 방식으로 실행될 수 있도록 보장</li>
    </ul>
  </li>
  <li><strong>인프라 코드화(IaC)</strong>: Terraform, Ansible 등
    <ul>
      <li>IaC(Infrastructure as Code)는 인프라를 코드로 관리하고 배포하는 방법으로 서버, 네트워크, 스토리지 등 인프라를 코드로 정의하고 자동으로 배포</li>
      <li>수동 설정의 위험을 줄이고, 환경을 코드화하여 일관성 있는 환경을 제공하여 재현 가능, 버전 관리 가능</li>
    </ul>
  </li>
  <li><strong>오케스트레이션·배포</strong>: Kubernetes, ArgoCD 등
    <ul>
      <li>여러 개의 컨테이너를 배포하고, 모니터링하고, 자동으로 확장하는 등의 작업을 처리</li>
    </ul>
  </li>
  <li><strong>테스트 자동화</strong>: JUnit, Selenium 등</li>
  <li><strong>모니터링·로그</strong>: Prometheus, Grafana, ELK 스택(Elasticsearch, Logstash, Kibana) 등
    <ul>
      <li>로그 수집 및 분석, 시각화 등으로 시스템의 상태를 지속적으로 점검하고, 발생할 수 있는 문제를 빠르게 해결</li>
    </ul>
  </li>
  <li><strong>협업·알림</strong>: Slack, Teams 등</li>
</ul>

<h2 id="1-6-cicd-파이프라인">1-6. CI/CD 파이프라인</h2>

<aside> 💡 CI (Continuous Integration, 지속적 통합)와 CD (Continuous Delivery 또는 Continuous Deployment, 지속적 제공 또는 지속적 배포)는 소프트웨어 개발의 현대적 접근 방식에서 중요한 역할을 한다. 이들은 개발의 효율성을 높이고, 소프트웨어의 품질을 개선하며, 배포 과정을 자동화하여 더 빠른 속도로 시장에 출시할 수 있게 돕는다.

</aside>

<ul>
  <li><strong>CI (Continuous Integration)</strong>: 개발자들이 작업한 코드를 주기적으로 (보통은 하루에 여러 번) 메인 저장소에 통합(머지)하는 것을 의미한다. 이 과정에서 자동화된 빌드와 테스트가 수행되어, 코드 변경 사항이 시스템에 통합될 때 발생할 수 있는 문제를 조기에 발견하고 수정한다.</li>
  <li><strong>CD (Continuous Delivery)</strong>: CI 과정을 통해 테스트된 코드를 자동으로 빌드하고 테스트 환경이나 스테이징 환경에 배포하는 것을 의미한다. 목표는 소프트웨어가 항상 출시 준비 상태를 유지하도록 하는 것이다.</li>
  <li><strong>CD (Continuous Deployment)</strong>: Continuous Delivery의 한 단계 더 나아가, 자동화된 테스트를 통과한 코드를 자동으로 프로덕션 환경에 배포하는 것이다. 이 과정은 수동 개입 없이 이루어진다.</li>
  <li><strong>장점</strong>
    <ul>
      <li><strong>개발 속도와 효율성 향상</strong>: 자동 화를 통해 개발 과정이 더 빠르고 효율적이 되며, 개발자는 코드 작성에 더 집중할 수 있다.</li>
      <li><strong>품질 개선</strong>: 자동화된 테스트와 지속적인 통합을 통해 소프트웨어의 품질이 개선된다.</li>
      <li><strong>배포 속도 증가</strong>: 자동화된 배포 과정을 통해 새로운 기능과 수정 사항을 빠르게 시장에 출시할 수 있다.</li>
    </ul>
  </li>
  <li><strong>단점</strong>
    <ul>
      <li><strong>시간과 비용</strong>: CI/CD 파이프라인을 설계하고 구현하는 데 초기에 상당한 시간과 비용이 소요된다. 적절한 도구 선택, 시스템 구성, 그리고 팀 교육에 대한 투자가 필요하다.</li>
      <li><strong>학습 곡선</strong>: 개발팀이 CI/CD 도구와 방법론에 익숙해지기까지는 시간이 걸리며, 초기에는 생산성이 저하될 수 있다.</li>
      <li><strong>파이프라인 유지 관리</strong>: 다수의 도구와 프로세스를 관리해야 하며, 파이프라인의 복잡성은 시간이 지남에 따라 증가할 수 있다. 이로 인해 유지 관리가 어려워질 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="cicd-파이프라인-단계">CI/CD 파이프라인 단계</h3>

<ol>
  <li><strong>코드 커밋 &amp; 브랜치 관리</strong></li>
  <li><strong>자동 빌드</strong></li>
  <li><strong>정적 분석 &amp; 단위 테스트</strong></li>
  <li><strong>통합 테스트 &amp; 배포 패키징</strong></li>
  <li><strong>자동화된 프로모션(스테이징→프로덕션)</strong></li>
  <li><strong>롤백 &amp; 배포 전략</strong>(블루-그린, 카나리아, 롤링 업데이트)</li>
</ol>

<aside> 💡

DevOps는 단순한 도구나 기술에 그치지 않고, **문화와 관행**의 변화이다.

</aside>

<ul>
  <li>Docker, Kubernetes, Jenkins와 같은 도구는 DevOps의 원활한 구현을 돕지만, 그 이면에는 <strong>협업과 자동화, 지속적인 피드백</strong>이 뒷받침되어야 한다.</li>
  <li><strong>개발자</strong>와 <strong>운영팀</strong>은 더 이상 각자의 영역에만 갇히지 않고, 하나의 팀으로 협업하며, 보다 빠르고 안정적인 배포가 가능해진다.</li>
  <li><strong>자동화</strong>는 반복적인 작업을 제거하고, <strong>빠른 피드백</strong>을 통해 품질을 개선하며, <strong>지속적인 개선</strong>을 이루는 핵심 요소다.</li>
  <li>DevOps 환경에서 개발자는 더 빠르고, 효율적으로 소프트웨어를 개발하고, 그 결과물은 사용자에게 신속하게 전달될 수 있다.</li>
</ul>]]></content><author><name>Start Bootstrap</name></author><category term="devops" /><summary type="html"><![CDATA[1. DevOps]]></summary></entry><entry><title type="html">테스트환경설정</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/ansible_test_setting.html" rel="alternate" type="text/html" title="테스트환경설정" /><published>2025-06-21T22:00:00+09:00</published><updated>2025-06-21T22:00:00+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/ansible_test_setting</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/ansible_test_setting.html"><![CDATA[<table>
  <thead>
    <tr>
      <th>역할</th>
      <th>이름</th>
      <th>예시 IP</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>제어 노드</td>
      <td><code class="language-plaintext highlighter-rouge">ansible-master</code></td>
      <td>192.168.0.101</td>
    </tr>
    <tr>
      <td>대상 노드</td>
      <td><code class="language-plaintext highlighter-rouge">node1</code>, <code class="language-plaintext highlighter-rouge">node2</code></td>
      <td>192.168.0.102, 192.168.0.103</td>
    </tr>
  </tbody>
</table>

<ul>
  <li><strong>네트워크 어댑터</strong>: VirtualBox → 브리지 어댑터</li>
</ul>

<hr />

<h2 id="1단계-ubuntu-설치-후-기본-설정">1단계: Ubuntu 설치 후 기본 설정</h2>

<p>각 VM에서 아래 명령을 수행</p>

<h3 id="11-사용자-이름-확인">1.1 사용자 이름 확인</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">whoami</span>


</code></pre></div></div>

<p>→ 이후 Ansible의 <code class="language-plaintext highlighter-rouge">ansible_user</code>로 사용됨</p>

<h3 id="12-네트워크-확인을-위한-net-tools-설치">1.2 네트워크 확인을 위한 net-tools 설치</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> net-tools
ifconfig


</code></pre></div></div>

<p>→ IP 확인 (브리지 모드에서 자동 할당됨)</p>

<hr />

<h2 id="2단계-ssh-서버-설정-node1-node2">2단계: SSH 서버 설정 (node1, node2)</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> openssh-server
<span class="nb">sudo </span>dpkg-reconfigure openssh-server   <span class="c"># 호스트 키 재생성</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>ssh
<span class="nb">sudo </span>systemctl start ssh


</code></pre></div></div>

<p>SSH 포트 확인:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ss <span class="nt">-tnlp</span> | <span class="nb">grep</span> :22


</code></pre></div></div>

<hr />

<h2 id="3단계-ansible-제어-노드에서-ssh-키-생성-및-배포">3단계: Ansible 제어 노드에서 SSH 키 생성 및 배포</h2>

<h3 id="31-키-생성">3.1 키 생성</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen   <span class="c"># 계속 Enter</span>

</code></pre></div></div>

<h3 id="32-키-배포">3.2 키 배포</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-copy-id 사용자명@192.168.0.102  <span class="c"># node1</span>
ssh-copy-id 사용자명@192.168.0.103  <span class="c"># node2</span>


</code></pre></div></div>

<p>→ 비밀번호 입력 후 키 복사 성공</p>

<hr />

<h2 id="4단계-ansible-설치-및-설정-ansible-master">4단계: Ansible 설치 및 설정 (ansible-master)</h2>

<h3 id="41-ansible-설치">4.1 Ansible 설치</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> ansible
ansible <span class="nt">--version</span>

</code></pre></div></div>

<h3 id="42-인벤토리-디렉토리-수동-생성">4.2 인벤토리 디렉토리 수동 생성</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /etc/ansible
<span class="nb">sudo touch</span> /etc/ansible/hosts
<span class="nb">sudo chmod </span>644 /etc/ansible/hosts


</code></pre></div></div>

<hr />

<h2 id="5단계-인벤토리hosts-파일-작성">5단계: 인벤토리(hosts) 파일 작성</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /etc/ansible/hosts


</code></pre></div></div>

<p>내용 예시:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[targets]
node1 ansible_host=192.168.0.102 ansible_user=ubuntu
node2 ansible_host=192.168.0.103 ansible_user=ubuntu


</code></pre></div></div>

<blockquote>
  <p>※ ubuntu는 대상 서버의 사용자명 (실제 로그인 가능해야 함)</p>
</blockquote>

<hr />

<h2 id="6단계-연결-테스트">6단계: 연결 테스트</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets <span class="nt">-m</span> ping

</code></pre></div></div>

<p>또는 명시적 경로 지정:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets <span class="nt">-i</span> /etc/ansible/hosts <span class="nt">-m</span> ping

</code></pre></div></div>

<p>예상 출력:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node1 | SUCCESS =&gt; {"ping": "pong"}
node2 | SUCCESS =&gt; {"ping": "pong"}


</code></pre></div></div>

<hr />

<h2 id="문제-해결-체크리스트">문제 해결 체크리스트</h2>

<table>
  <thead>
    <tr>
      <th>문제</th>
      <th>해결 방법</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">no inventory was parsed</code></td>
      <td><code class="language-plaintext highlighter-rouge">/etc/ansible/hosts</code> 존재 여부 확인 또는 <code class="language-plaintext highlighter-rouge">-i</code> 옵션 사용</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">E212: Can't open file for writing</code></td>
      <td><code class="language-plaintext highlighter-rouge">sudo</code> 없이 파일 열었음 → <code class="language-plaintext highlighter-rouge">sudo vi /etc/ansible/hosts</code> 사용</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sshd: no hostkeys available</code></td>
      <td><code class="language-plaintext highlighter-rouge">sudo dpkg-reconfigure openssh-server</code> 실행하여 호스트 키 생성</td>
    </tr>
    <tr>
      <td>SSH 접속 안됨</td>
      <td>대상 노드에 <code class="language-plaintext highlighter-rouge">openssh-server</code> 설치 및 <code class="language-plaintext highlighter-rouge">sshd</code> 실행 확인</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="명령어-요약">명령어 요약</h2>

<hr />

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 사용자명 확인</span>
<span class="nb">whoami</span>

<span class="c"># 네트워크 확인</span>
ifconfig

<span class="c"># SSH 시작</span>
<span class="nb">sudo </span>systemctl start ssh

<span class="c"># SSH 포트 확인</span>
<span class="nb">sudo </span>ss <span class="nt">-tnlp</span> | <span class="nb">grep</span> :22

<span class="c"># Ansible 설치</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>ansible

<span class="c"># 키 복사</span>
ssh-copy-id 사용자명@192.168.0.102

<span class="c"># 연결 테스트</span>
ansible targets <span class="nt">-i</span> /etc/ansible/hosts <span class="nt">-m</span> ping


</code></pre></div></div>]]></content><author><name>Start Bootstrap</name></author><category term="ansible" /><summary type="html"><![CDATA[역할 이름 예시 IP 제어 노드 ansible-master 192.168.0.101 대상 노드 node1, node2 192.168.0.102, 192.168.0.103]]></summary></entry><entry><title type="html">Ansible이란</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/ansible_is.html" rel="alternate" type="text/html" title="Ansible이란" /><published>2025-06-21T22:00:00+09:00</published><updated>2025-06-21T22:00:00+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/ansible_is</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/ansible_is.html"><![CDATA[<h1 id="1-ansible이란">1. Ansible이란</h1>

<h2 id="1-1-ansible-개념"><strong>1-1. Ansible 개념</strong></h2>

<ul>
  <li>
    <p>Ansible은 <strong>자동화 도구</strong>로 인프라 환경 설정, 앱 배포, 서버 관리 등을 코드로 작성하고 자동 실행합니다.</p>
  </li>
  <li>
    <p>시스템 구성, 소프트웨어 배포, 지속적 배포(CD), 다운타임없는 업데이트와 같은 고급 IT작업을 자동화하고 조정(오케스트레이션)할 수 있도록 설계되었다.</p>
  </li>
  <li>
    <p><strong>자동화 범위</strong>:</p>
  </li>
  <li>
    <p>서버 설정 자동화 (ex. 사용자, 패키지, 방화벽 설정)</p>
  </li>
  <li>
    <p>애플리케이션 배포 (ex. Git pull → 빌드 → 서비스 재시작)</p>
  </li>
  <li>
    <p>보안 정책 적용 (ex. SSH 포트 제한, 암호 정책 설정)</p>
  </li>
  <li>
    <p>클라우드 리소스 생성 (ex. AWS EC2 인스턴스 생성)</p>
  </li>
</ul>

<hr />

<h2 id="1-2-ansible의-주요-특징"><strong>1-2. Ansible의 주요 특징</strong></h2>

<table>
  <thead>
    <tr>
      <th><strong>특징</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>에이전트리스 (Agentless)</strong></td>
      <td>대상 서버에 별도의 에이전트 설치 없이 <strong>SSH만으로 통신</strong>함. 유지 관리가 간편하고 보안 부담이 적음.</td>
    </tr>
    <tr>
      <td><strong>간단한 문법 (YAML 기반 Playbook)</strong></td>
      <td>사람이 읽기 쉬운 YAML 형식으로 작업 정의. 패키지 설치, 설정 배포, 서비스 재시작 등을 <strong>순서대로 작성 가능</strong>.</td>
    </tr>
    <tr>
      <td><strong>멱등성 (Idempotent)</strong></td>
      <td>같은 작업을 여러 번 실행해도 <strong>결과가 항상 동일</strong>하게 유지됨. 예: 이미 설치된 nginx는 건너뜀.</td>
    </tr>
    <tr>
      <td><strong>모듈 기반 구조</strong></td>
      <td>수천 개의 기능이 <strong>모듈 형태로 제공</strong>됨. 예: <code class="language-plaintext highlighter-rouge">yum</code>, <code class="language-plaintext highlighter-rouge">apt</code>, <code class="language-plaintext highlighter-rouge">copy</code>, <code class="language-plaintext highlighter-rouge">service</code> 등. 사용자 정의 모듈도 가능.</td>
    </tr>
    <tr>
      <td><strong>확장성</strong></td>
      <td><strong>인벤토리 파일</strong>을 통해 서버를 그룹 단위로 관리. AWS, Azure, GCP와 같은 <strong>클라우드 환경과도 연동</strong> 가능.</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="1-3-ansible이-해결하는-문제"><strong>1-3. Ansible이 해결하는 문제</strong></h2>

<table>
  <thead>
    <tr>
      <th><strong>업무 영역</strong></th>
      <th><strong>적용 내용</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>서버 초기 세팅</strong></td>
      <td>사용자 계정 생성, 패키지 설치, Timezone, 방화벽 설정 등</td>
    </tr>
    <tr>
      <td><strong>애플리케이션 배포</strong></td>
      <td>Git에서 코드 받아오기, 빌드, 배포, 서비스 재시작 등 전체 배포 프로세스 자동화</td>
    </tr>
    <tr>
      <td><strong>보안 정책 적용</strong></td>
      <td>패스워드 복잡성, 방화벽, 특정 포트 차단 등 정책을 모든 서버에 일관되게 적용</td>
    </tr>
    <tr>
      <td><strong>로그 수집기 배포</strong></td>
      <td>Filebeat, Fluentd 등 로그 수집기 설치와 설정 자동화</td>
    </tr>
    <tr>
      <td><strong>다수 서버 대상 작업</strong></td>
      <td>수십~수천 대 서버에 동시에 설정 변경, 업데이트, 점검</td>
    </tr>
    <tr>
      <td><strong>클라우드 자원 생성</strong></td>
      <td>AWS/GCP 인스턴스, VPC, 보안 그룹 생성과 설정 자동화</td>
    </tr>
    <tr>
      <td><strong>Kubernetes 초기화</strong></td>
      <td>kubeadm으로 마스터/워커 클러스터 구성 자동화</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="1-4-ansible의-장점"><strong>1-4. Ansible의 장점</strong></h2>

<table>
  <thead>
    <tr>
      <th><strong>장점</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>에이전트리스 구조</strong></td>
      <td>대상 서버에 별도 소프트웨어 설치 없이 SSH만 있으면 동작. 유지 관리가 단순하고 효율적.</td>
    </tr>
    <tr>
      <td><strong>간단한 문법 (YAML)</strong></td>
      <td>사람이 읽고 쓰기 쉬운 YAML 문법 사용 → 코드 작성과 유지보수가 쉬움.</td>
    </tr>
    <tr>
      <td><strong>멱등성 보장</strong></td>
      <td>같은 작업을 여러 번 실행해도 결과가 동일 → 실수로 중복 실행해도 시스템에 변화 없음.</td>
    </tr>
    <tr>
      <td><strong>빠른 도입 가능</strong></td>
      <td>복잡한 설정 없이도 금방 실무에 적용 가능 → 작은 팀에서도 쉽게 시작 가능.</td>
    </tr>
    <tr>
      <td><strong>모듈 기반 구조</strong></td>
      <td>다양한 작업을 위한 모듈이 내장되어 있어 확장성 뛰어남 (ex. docker, aws, service 등).</td>
    </tr>
    <tr>
      <td><strong>커뮤니티와 생태계</strong></td>
      <td>문서화가 잘 되어 있고, 예제와 플러그인이 풍부하며 Red Hat의 공식 지원도 있음.</td>
    </tr>
    <tr>
      <td><strong>멀티 OS 지원</strong></td>
      <td>리눅스뿐 아니라 윈도우 서버 관리도 가능 (WinRM 지원)</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="1-5-ansible의-단점"><strong>1-5. Ansible의 단점</strong></h2>

<table>
  <thead>
    <tr>
      <th><strong>단점</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>속도 문제</strong></td>
      <td>SSH 방식은 순차적(Push 방식) 실행이기 때문에 <strong>수백 대 이상의 서버 작업은 느릴 수 있음</strong>.</td>
    </tr>
    <tr>
      <td><strong>복잡한 로직 구현 한계</strong></td>
      <td>조건문, 반복문 등의 복잡한 흐름을 표현하기 어려움. (Jinja2 템플릿과 변수로 극복 가능하지만 한계 존재)</td>
    </tr>
    <tr>
      <td><strong>에러 로깅 및 디버깅 약함</strong></td>
      <td>에러 발생 시 메시지가 단순하며, 복잡한 작업 디버깅에 어려움이 있음.</td>
    </tr>
    <tr>
      <td><strong>GUI 부족</strong></td>
      <td>기본적으로 CLI 기반이며, GUI(AWX, Ansible Tower)는 별도 설치와 관리 필요.</td>
    </tr>
    <tr>
      <td><strong>대규모 분산 처리 비효율적</strong></td>
      <td>수많은 노드를 동시에 처리하는 경우 Puppet/Chef 같은 Pull 방식 도구가 더 적합할 수 있음.</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="1-6-다른-도구와-비교"><strong>1-6. 다른 도구와 비교</strong></h2>

<table>
  <thead>
    <tr>
      <th><strong>항목</strong></th>
      <th><strong>Ansible</strong></th>
      <th><strong>Chef / Puppet</strong></th>
      <th><strong>Terraform</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>설치 방식</td>
      <td>에이전트 없음</td>
      <td>에이전트 필요</td>
      <td>에이전트 없음</td>
    </tr>
    <tr>
      <td>실행 방식</td>
      <td>Push 방식 (SSH)</td>
      <td>Pull 방식</td>
      <td>선언적 실행 (IaC)</td>
    </tr>
    <tr>
      <td>구성 목적</td>
      <td>설정 및 운영 자동화</td>
      <td>설정 및 운영 자동화</td>
      <td>인프라 프로비저닝 중심</td>
    </tr>
    <tr>
      <td>문법</td>
      <td>YAML</td>
      <td>Ruby DSL</td>
      <td>HCL</td>
    </tr>
    <tr>
      <td>학습 곡선</td>
      <td>쉬움</td>
      <td>다소 어려움</td>
      <td>보통</td>
    </tr>
    <tr>
      <td>적합한 환경</td>
      <td>중소규모, 빠른 시작</td>
      <td>대규모 엔터프라이즈</td>
      <td>멀티클라우드/클라우드 중심</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="1-7-ansible의-개념-구성요소">1-7. Ansible의 개념 구성요소</h2>

<table>
  <thead>
    <tr>
      <th>요소</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Inventory (인벤토리)</strong></td>
      <td>관리 대상 노드의 목록 및 그룹을 정의 IP 또는 도메인 기반, 정적/동적 인벤토리 구성 가능</td>
    </tr>
    <tr>
      <td><strong>Playbooks (플레이북)</strong></td>
      <td>여러 Task를 순서대로 저장한 YAML 파일 반복 작업을 코드화하여 재사용 가능</td>
    </tr>
    <tr>
      <td><strong>Modules (모듈)</strong></td>
      <td>Ansible의 기능 단위 코드 블록 예: <code class="language-plaintext highlighter-rouge">ping</code>, <code class="language-plaintext highlighter-rouge">yum</code>, <code class="language-plaintext highlighter-rouge">copy</code>, <code class="language-plaintext highlighter-rouge">service</code> 등 수많은 모듈 제공 JSON을 반환할 수 있는 언어로 컨스텀 모듈 작성 가능</td>
    </tr>
    <tr>
      <td><strong>Control Node (제어 노드)</strong></td>
      <td>Ansible이 설치된 시스템 <code class="language-plaintext highlighter-rouge">/usr/bin/ansible</code>, <code class="language-plaintext highlighter-rouge">/usr/bin/ansible-playbook</code> 실행 가능 Python이 설치되어 있다면 대부분의 리눅스/유니스 계열에서 사용 가능 Windows는 제어 노드로 사용 불가</td>
    </tr>
    <tr>
      <td><strong>Managed Nodes (관리 노드)</strong></td>
      <td>Ansible이 제어하는 대상 서버 또는 네트워크 장비 변수의 에이전트나 Ansible 설치 불필요</td>
    </tr>
    <tr>
      <td><strong>Tasks (작업 단위)</strong></td>
      <td>모듈을 호출하여 실행하는 단일 명령 Playbook 또는 ad-hoc 명령으로 실행 가능</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Start Bootstrap</name></author><category term="ansible" /><summary type="html"><![CDATA[1. Ansible이란]]></summary></entry><entry><title type="html">Vagrant를 이용한 환경구축</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/Vagrant%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95.html" rel="alternate" type="text/html" title="Vagrant를 이용한 환경구축" /><published>2025-06-21T22:00:00+09:00</published><updated>2025-06-21T22:00:00+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/Vagrant%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/Vagrant%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95.html"><![CDATA[<h2 id="vagrant란">Vagrant란?</h2>

<p><strong>Vagrant</strong>는 개발 환경을 코드로 정의하고 손쉽게 복제할 수 있도록 도와주는 <strong>가상 머신 자동화 관리 도구</strong>입니다. VirtualBox, VMware, Hyper-V 같은 가상화 소프트웨어 위에 작동하며, 가상 머신의 생성, 설정, 부팅, 폐기를 한 줄의 명령어로 제어할 수 있게 해줍니다.</p>

<hr />

<h2 id="vagrant-vs-virtualbox">Vagrant vs VirtualBox</h2>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>Vagrant</th>
      <th>VirtualBox</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>목적</td>
      <td>VM 자동화 관리 도구</td>
      <td>가상화 실행 엔진 (하이퍼바이저)</td>
    </tr>
    <tr>
      <td>기능</td>
      <td>VM 생성, 설정, 부팅 자동화</td>
      <td>수동 GUI 기반 가상 머신 설정 및 실행</td>
    </tr>
    <tr>
      <td>설정 방식</td>
      <td>코드 기반 (Vagrantfile)</td>
      <td>GUI 클릭 기반</td>
    </tr>
    <tr>
      <td>반복성</td>
      <td>동일한 환경을 코드로 재현 가능</td>
      <td>동일한 환경 구성 복제 어려움</td>
    </tr>
    <tr>
      <td>실습 활용</td>
      <td>DevOps, 인프라 자동화 실습에 적합</td>
      <td>단일 테스트나 GUI 실습에 적합</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="1-요구-사항">1. 요구 사항</h2>

<h3 id="호스트-시스템">호스트 시스템</h3>

<ul>
  <li>운영체제: Windows 10 이상</li>
  <li>설치 필요:
    <ul>
      <li><a href="https://www.virtualbox.org/">VirtualBox</a></li>
      <li>Vagrant</li>
      <li>텍스트 에디터 (VSCode, Notepad++ 등)</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="2-실습용-디렉토리-준비">2. 실습용 디렉토리 준비</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Windows PowerShell 또는 CMD에서
mkdir C:\\vagrant\\ansible-lab
cd C:\\vagrant\\ansible-lab
vagrant init

</code></pre></div></div>

<hr />

<h2 id="3-vagrantfile-설정">3. Vagrantfile 설정</h2>

<p><code class="language-plaintext highlighter-rouge">Vagrantfile</code>을 다음과 같이 수정합니다:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure("2") do |config|
  config.vm.define "ansible-master" do |master|
    master.vm.box = "ubuntu/jammy64"
    master.vm.hostname = "ansible-master"
    master.vm.network "private_network", ip: "192.168.56.10"
  end

  config.vm.define "node1" do |node|
    node.vm.box = "ubuntu/jammy64"
    node.vm.hostname = "node1"
    node.vm.network "private_network", ip: "192.168.56.11"
  end

  config.vm.define "node2" do |node|
    node.vm.box = "ubuntu/jammy64"
    node.vm.hostname = "node2"
    node.vm.network "private_network", ip: "192.168.56.12"
  end
end

</code></pre></div></div>

<hr />

<blockquote>
  <p>ubuntu/jammy64는 Ubuntu 22.04 LTS 입니다.</p>
</blockquote>

<h2 id="4-vm-부팅-및-접속">4. VM 부팅 및 접속</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant up
vagrant ssh ansible-master

</code></pre></div></div>

<hr />

<h2 id="5-ansible-master-서버-설정">5. Ansible Master 서버 설정</h2>

<h3 id="1-ansible-설치">(1) Ansible 설치</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
sudo apt install -y ansible

</code></pre></div></div>

<h3 id="2-ssh-키-설정-및-복사">(2) SSH 키 설정 및 복사</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ansible-master에서
ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa

# node1/node2에 복사
ssh-copy-id vagrant@192.168.56.11
ssh-copy-id vagrant@192.168.56.12

</code></pre></div></div>

<blockquote>
  <p>처음 접속 시 “Are you sure you want to continue connecting?” 메시지에 yes 입력</p>
</blockquote>

<h3 id="3-인벤토리-설정">(3) 인벤토리 설정</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mkdir -p /etc/ansible
sudo vi /etc/ansible/hosts

</code></pre></div></div>

<p>내용:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[targets]
node1 ansible_host=192.168.56.11 ansible_user=vagrant ansible_ssh_private_key_file=/home/vagrant/.ssh/node1_key
node2 ansible_host=192.168.56.12 ansible_user=vagrant ansible_ssh_private_key_file=/home/vagrant/.ssh/node2_key

</code></pre></div></div>

<blockquote>
  <p>SSH 키는 공유폴더(/vagrant/…)에서 복사해와야 함:</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp /vagrant/.vagrant/machines/node1/virtualbox/private_key ~/.ssh/node1_key
cp /vagrant/.vagrant/machines/node2/virtualbox/private_key ~/.ssh/node2_key
chmod 600 ~/.ssh/node1_key ~/.ssh/node2_key

</code></pre></div></div>

<h3 id="4-ssh-config-설정-선택">(4) SSH config 설정 (선택)</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.ssh/config

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host node1
  HostName 192.168.56.11
  User vagrant
  IdentityFile ~/.ssh/node1_key

Host node2
  HostName 192.168.56.12
  User vagrant
  IdentityFile ~/.ssh/node2_key

</code></pre></div></div>

<hr />

<h2 id="6-ansible-테스트">6. Ansible 테스트</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m ping

</code></pre></div></div>

<p>예상 출력:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node1 | SUCCESS =&gt; {"ping": "pong"}
node2 | SUCCESS =&gt; {"ping": "pong"}

</code></pre></div></div>

<hr />

<h2 id="7-참고">7. [참고]</h2>

<ul>
  <li>Vagrant 공유 폴더에서는 <code class="language-plaintext highlighter-rouge">chmod</code>가 정상 동작하지 않음 → 개인 키는 반드시 <code class="language-plaintext highlighter-rouge">~/.ssh/</code>로 복사 후 <code class="language-plaintext highlighter-rouge">chmod 600</code></li>
  <li>Ansible은 <code class="language-plaintext highlighter-rouge">~/.ssh/config</code>를 사용할 수도 있지만, 가장 안정적인 방법은 인벤토리 파일에서 <code class="language-plaintext highlighter-rouge">ansible_ssh_private_key_file</code>을 직접 지정하는 것</li>
</ul>

<hr />

<h2 id="8-ad-hoc-명령어란">8. Ad-Hoc 명령어란?</h2>

<p>Ansible에서 <strong>ad-hoc 명령어</strong>는 플레이북을 작성하지 않고 단일 작업을 단발성으로 실행할 수 있는 명령어입니다. 주로 테스트, 시스템 점검, 단순 작업을 빠르게 실행할 때 유용합니다.</p>

<h3 id="어디에서-실행해야-하나요">어디에서 실행해야 하나요?</h3>

<p>Ad-hoc 명령어는 <strong>Ansible이 설치된 제어 노드(여기서는 ansible-master)</strong>에서 실행해야 합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant ssh ansible-master

</code></pre></div></div>

<p>접속 후, 다음과 같은 형식으로 명령을 실행합니다:</p>

<h3 id="형식">형식</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible [대상] -m [모듈] -a "[인자]"

</code></pre></div></div>

<h3 id="주요-예시와-설명">주요 예시와 설명</h3>

<h3 id="1-ping-테스트">(1) ping 테스트</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m ping

</code></pre></div></div>

<p><strong>설명:</strong> 대상 서버가 Ansible을 통해 접속 가능한지 확인하는 기본 테스트입니다.</p>

<p><strong>결과:</strong> <code class="language-plaintext highlighter-rouge">SUCCESS</code>와 함께 <code class="language-plaintext highlighter-rouge">{"ping": "pong"}</code> 출력</p>

<h3 id="2-원격-명령-실행">(2) 원격 명령 실행</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m command -a "uptime"

</code></pre></div></div>

<p><strong>설명:</strong> 각 노드의 시스템 부하 상태(uptime)를 확인합니다.</p>

<p><strong>결과:</strong> 시스템 부팅 이후 경과 시간, 로그인 사용자 수, 평균 부하율 출력</p>

<h3 id="3-패키지-설치">(3) 패키지 설치</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m apt -a "name=tree state=present update_cache=yes" --become

</code></pre></div></div>

<p><strong>설명:</strong> <code class="language-plaintext highlighter-rouge">tree</code>라는 패키지를 모든 노드에 설치합니다.</p>

<p><strong>결과:</strong> 설치 성공 여부와 변경 상태 (<code class="language-plaintext highlighter-rouge">changed</code>: true/false)</p>

<h3 id="4-서비스-상태-확인-및-시작">(4) 서비스 상태 확인 및 시작</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m service -a "name=nginx state=started enabled=yes" --become

</code></pre></div></div>

<p><strong>설명:</strong> nginx 서비스를 시작하고 부팅 시 자동 실행되도록 설정합니다.</p>

<p><strong>결과:</strong> <code class="language-plaintext highlighter-rouge">state=started</code>와 <code class="language-plaintext highlighter-rouge">enabled=true</code> 여부에 따른 결과 출력</p>

<h3 id="5-파일-복사">(5) 파일 복사</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m copy -a "src=/etc/hosts dest=/tmp/hosts_copy" --become

</code></pre></div></div>

<p><strong>설명:</strong> 제어 노드의 <code class="language-plaintext highlighter-rouge">/etc/hosts</code> 파일을 대상 서버의 <code class="language-plaintext highlighter-rouge">/tmp/hosts_copy</code>로 복사합니다.</p>

<p><strong>결과:</strong> 파일이 복사되었는지 여부 (<code class="language-plaintext highlighter-rouge">changed</code>: true)</p>

<h3 id="6-사용자-추가">(6) 사용자 추가</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m user -a "name=devuser shell=/bin/bash" --become

</code></pre></div></div>

<p><strong>설명:</strong> 각 노드에 <code class="language-plaintext highlighter-rouge">devuser</code>라는 사용자 계정을 추가합니다.</p>

<p><strong>결과:</strong> 사용자가 생성되었는지 여부 출력</p>

<p><strong>확인 방법:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m command -a "id devuser"

</code></pre></div></div>

<p><strong>예상 결과:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node1 | SUCCESS =&gt; {"stdout": "uid=1001(devuser) gid=1001(devuser) groups=1001(devuser)"}
node2 | SUCCESS =&gt; {"stdout": "uid=1001(devuser) gid=1001(devuser) groups=1001(devuser)"}

</code></pre></div></div>

<blockquote>
  <p>–become은 root 권한이 필요한 작업에서 사용합니다.</p>
</blockquote>

<hr />]]></content><author><name>Start Bootstrap</name></author><category term="ansible" /><summary type="html"><![CDATA[Vagrant란?]]></summary></entry><entry><title type="html">MySQL 설치 실습</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/MySQL_%EC%84%A4%EC%B9%98_%EC%8B%A4%EC%8A%B5.html" rel="alternate" type="text/html" title="MySQL 설치 실습" /><published>2025-06-21T22:00:00+09:00</published><updated>2025-06-21T22:00:00+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/MySQL_%EC%84%A4%EC%B9%98_%EC%8B%A4%EC%8A%B5</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/MySQL_%EC%84%A4%EC%B9%98_%EC%8B%A4%EC%8A%B5.html"><![CDATA[<h2 id="mysql-설치-및-접속-테스트-실습-가이드">MySQL 설치 및 접속 테스트 실습 가이드</h2>

<h3 id="목표">목표</h3>

<ul>
  <li>이전에 실행한 실습 서버를 초기화하고 Vagrant로 재구성</li>
  <li>Ansible Role을 통해 MySQL 자동 설치</li>
  <li>Node.js 또는 Spring Boot 애플리케이션으로 DB 접속 테스트 수행</li>
</ul>

<hr />

<h3 id="1단계-기존-환경-초기화-호스트-os에서-실행">1단계: 기존 환경 초기화 (호스트 OS에서 실행)</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /vagrant/ansible-lab
vagrant destroy -f
</code></pre></div></div>

<hr />

<h3 id="2단계-vagrant-환경-다시-구성-호스트-os에서-실행">2단계: Vagrant 환경 다시 구성 (호스트 OS에서 실행)</h3>

<p><code class="language-plaintext highlighter-rouge">Vagrantfile</code> 예시:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure("2") do |config|
  config.vm.define "ansible-master" do |master|
    master.vm.box = "ubuntu/jammy64"
    master.vm.hostname = "ansible-master"
    master.vm.network "private_network", ip: "192.168.56.10"
  end

  config.vm.define "db" do |db|
    db.vm.box = "ubuntu/jammy64"
    db.vm.hostname = "node2"
    db.vm.network "private_network", ip: "192.168.56.12"
  end
end
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant up
</code></pre></div></div>

<hr />

<h3 id="3단계-ansible-master에서-ssh-접속-및-설정-vm-내부에서-실행">3단계: ansible-master에서 SSH 접속 및 설정 (VM 내부에서 실행)</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant ssh ansible-master
sudo apt update &amp;&amp; sudo apt install -y ansible
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
ssh-copy-id vagrant@192.168.56.12
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">/etc/ansible/hosts</code> 파일을 직접 수정하는 것으로 진행합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mkdir -p /etc/ansible
sudo mkdir -p /etc/ansible

sudo vi /etc/ansible/hosts
</code></pre></div></div>

<p>아래 내용을 추가하세요:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[db]
node2 ansible_host=192.168.56.12 ansible_user=vagrant ansible_ssh_private_key_file=/home/vagrant/.ssh/node2_key
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cp</span> <span class="o">/</span><span class="nx">vagrant</span><span class="o">/</span><span class="p">.</span><span class="nx">vagrant</span><span class="o">/</span><span class="nx">machines</span><span class="o">/</span><span class="nx">db</span><span class="o">/</span><span class="nx">virtualbox</span><span class="o">/</span><span class="nx">private_key</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="nx">node2_key</span>
<span class="nx">chmod</span> <span class="mi">600</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="nx">node2_key</span>
</code></pre></div></div>

<h3 id="디렉토리-구조-요약">디렉토리 구조 요약</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-lab/
├── Vagrantfile
├── playbooks/
│   ├── mysql-role.yml
│   └── roles/
│       └── mysql/
│           ├── tasks/
│           │   └── main.yml
│           ├── vars/
│           │   └── main.yml
│           ├── handlers/
│           │   └── main.yml
│           └── defaults/
│               └── main.yml (선택)
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cd</span> <span class="o">/</span><span class="nx">vagrant</span><span class="o">/</span><span class="nx">playbooks</span>
<span class="nx">ansible</span><span class="o">-</span><span class="nx">galaxy</span> <span class="nx">init</span> <span class="nx">roles</span><span class="o">/</span><span class="nx">mysql</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">roles/mysql/vars/main.yml</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql_root_password: mysql1
mysql_db_name: appdb
mysql_user: appuser
mysql_user_password: mysql1
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">roles/mysql/handlers/main.yml</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Restart mysql
  service:
    name: mysql
    state: restarted
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">roles/mysql/tasks/main.yml</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Install MySQL
  apt:
    name: mysql-server
    state: present
    update_cache: yes

- name: Allow MySQL to listen on all interfaces
  lineinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: '^bind-address'
    line: 'bind-address = 0.0.0.0'
  notify: Restart mysql

- name: Ensure MySQL is running
  service:
    name: mysql
    state: started
    enabled: yes

- name: Set root password and initialize DB
  shell: |
    mysql -u root &lt;&lt;EOF
    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '';
    CREATE DATABASE IF NOT EXISTS ;
    CREATE USER IF NOT EXISTS ''@'%' IDENTIFIED BY '';
    GRANT ALL PRIVILEGES ON .* TO ''@'%';
    FLUSH PRIVILEGES;
    EOF
  args:
    executable: /bin/bash
  ignore_errors: yes
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mysql-role.yml</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Configure MySQL server using role
  hosts: db
  become: yes
  roles:
    - mysql
</code></pre></div></div>

<p>실행:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /vagrant/playbooks
ansible-playbook mysql-role.yml
</code></pre></div></div>

<hr />

<hr />

<h3 id="5단계--spring-boot를-통한-접속-확인">5단계:  Spring Boot를 통한 접속 확인</h3>

<h3 id="spring-boot-예시">Spring Boot 예시:</h3>

<p><code class="language-plaintext highlighter-rouge">application.yml</code></p>]]></content><author><name>Start Bootstrap</name></author><category term="ansible" /><summary type="html"><![CDATA[MySQL 설치 및 접속 테스트 실습 가이드]]></summary></entry><entry><title type="html">플레이북</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/playbook.html" rel="alternate" type="text/html" title="플레이북" /><published>2025-06-21T22:00:00+09:00</published><updated>2025-06-21T22:00:00+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/playbook</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/ansible/2025/06/21/playbook.html"><![CDATA[<h2 id="1-플레이북으로-nginx-설치-자동화">1. 플레이북으로 Nginx 설치 자동화</h2>

<h3 id="플레이북이란">플레이북이란?</h3>

<ul>
  <li>*플레이북(playbook)<strong>은 Ansible에서 복잡한 작업을 반복 가능하고 읽기 쉬운 **YAML 파일 형태로 정의</strong>한 자동화 스크립트입니다. Ad-hoc 명령은 단발성 작업에 적합하지만, <strong>여러 작업을 순차적으로 실행하거나 버전 관리하고자 할 때는 플레이북이 필요</strong>합니다.</li>
</ul>

<h3 id="목적">목적</h3>

<ul>
  <li>반복 가능한 작업 자동화 (예: 여러 서버에 Nginx 설치)</li>
  <li>역할과 태스크를 분리하여 명확하게 구성</li>
</ul>

<h3 id="디렉토리-구성-예시">디렉토리 구성 예시</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-lab/
├── playbooks/
│   └── install-nginx.yml
</code></pre></div></div>

<h3 id="install-nginxyml">install-nginx.yml</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Install and Start Nginx on all target servers
  hosts: targets
  become: yes
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Ensure nginx is running
      service:
        name: nginx
        state: started
        enabled: yes
</code></pre></div></div>

<h3 id="-실행-명령어">▶ 실행 명령어</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd .. 
cd .. 
cd vagrant/

ansible-playbook playbooks/install-nginx.yml
</code></pre></div></div>

<h3 id="결과-확인">결과 확인</h3>

<ol>
  <li>
    <p><strong>nginx가 설치되었는지 확인</strong>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ansible targets <span class="nt">-m</span> <span class="nb">command</span> <span class="nt">-a</span> <span class="s2">"nginx -v"</span>
    
</code></pre></div>    </div>

    <p>→ 각 노드에 nginx 버전 출력되면 설치 완료.</p>
  </li>
  <li>
    <p><strong>nginx가 실행 중인지 확인</strong>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ansible targets <span class="nt">-m</span> service <span class="nt">-a</span> <span class="s2">"name=nginx state=started"</span>
    
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>웹 서버 응답 확인</strong>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ansible targets <span class="nt">-m</span> <span class="nb">command</span> <span class="nt">-a</span> <span class="s2">"curl -I http://localhost"</span>
    
</code></pre></div>    </div>
  </li>
</ol>

<p><strong>예상 결과:</strong> HTTP 200 OK 또는 403 Forbidden 등 웹 서버 응답 헤더 출력</p>

<hr />

<h2 id="2-변수와-핸들러를-활용한-플레이북-개선">2. 변수와 핸들러를 활용한 플레이북 개선</h2>

<h3 id="목표">목표</h3>

<ul>
  <li>Nginx 설치 및 설정 변경 시 자동으로 서비스 재시작</li>
  <li>반복되는 값을 변수로 분리하여 가독성과 유지 보수성 향상</li>
</ul>

<h3 id="디렉토리-구조-예시">디렉토리 구조 예시</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-lab/
├── playbooks/
│   ├── install-nginx.yml
│   ├── vars.yml
</code></pre></div></div>

<h3 id="varsyml">vars.yml</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nginx_package: nginx
nginx_service: nginx
</code></pre></div></div>

<h3 id="install-nginxyml-1">install-nginx.yml</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Install and manage nginx with handler
  hosts: targets
  become: yes
  vars_files:
    - /vagrant/playbooks/vars.yml
  tasks:
    - name: Install nginx
      apt:
        name: ""
        state: present
        update_cache: yes
      notify: Restart nginx

    - name: Ensure nginx is enabled and running
      service:
        name: ""
        state: started
        enabled: yes

  handlers:
    - name: Restart nginx
      service:
        name: ""
        state: restarted
</code></pre></div></div>

<h3 id="-실행-명령어-1">▶ 실행 명령어</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook /vagrant/playbooks/install-nginx.yml
</code></pre></div></div>

<h3 id="확인">확인</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m command -a "systemctl status nginx"
</code></pre></div></div>

<blockquote>
  <p>설정 파일이 변경되거나 nginx가 설치된 경우, handler가 작동하여 자동으로 서비스를 재시작합니다.</p>

</blockquote>

<hr />

<hr />

<h2 id="3-템플릿을-활용한-nginx-설정-배포-jinja2">3. 템플릿을 활용한 Nginx 설정 배포 (Jinja2)</h2>

<h3 id="jinja2란">Jinja2란?</h3>

<p>Jinja2는 Python 기반의 가장 널리 사용되는 <strong>템플릿 엔진</strong> 중 하나로, 텍스트 기반 파일에 변수, 조건문, 반복문 등을 삽입하여 <strong>동적으로 파일을 생성</strong>할 수 있도록 도와줍니다.</p>

<p>Ansible은 내부적으로 Jinja2를 템플릿 엔진으로 채택하고 있으며, 다음과 같은 이유로 널리 사용됩니다:</p>

<ul>
  <li><strong>가독성이 높은 문법</strong>: `` 형식으로 직관적인 구문 제공</li>
  <li><strong>조건문, 반복문, 필터 지원</strong>: 템플릿 내에서 if, for, length 등 다양한 표현 사용 가능</li>
  <li><strong>YAML, HTML, conf 파일 등 다양한 형식 지원</strong></li>
  <li><strong>Python 기반으로 Ansible과 자연스럽게 연동됨</strong></li>
</ul>

<h3 id="다른-템플릿-엔진과-비교">다른 템플릿 엔진과 비교</h3>

<table>
  <thead>
    <tr>
      <th>템플릿 엔진</th>
      <th>특징</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Jinja2</strong></td>
      <td>Python 기반, Ansible 기본 탑재</td>
      <td>⭐ 기본 선택</td>
    </tr>
    <tr>
      <td>Mustache</td>
      <td>언어 중립적, 로직 없는 템플릿 지향</td>
      <td>복잡한 표현 제한</td>
    </tr>
    <tr>
      <td>ERB (Embedded Ruby)</td>
      <td>Ruby 기반</td>
      <td>Chef 등에서 사용됨</td>
    </tr>
    <tr>
      <td>EJS (Embedded JS)</td>
      <td>JavaScript 기반</td>
      <td>Node.js에서 사용</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Ansible에서는 Jinja2가 기본 내장되어 있고, 대부분의 문서, 예제, 커뮤니티가 Jinja2를 중심으로 구성되어 있으므로 별도 설치 없이 바로 사용 가능하며, 실무에서도 가장 널리 사용됩니다.</p>

</blockquote>

<h3 id="목표-1">목표</h3>

<ul>
  <li>Nginx의 설정 파일을 템플릿 파일로 구성하여 서버마다 유연하게 배포할 수 있도록 구성</li>
  <li>Ansible 템플릿 엔진(Jinja2)을 사용하여 변수 기반 설정 파일 생성</li>
</ul>

<h3 id="디렉토리-구조-예시-1">디렉토리 구조 예시</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-lab/
├── playbooks/
│   ├── nginx-role.yml
│   └── roles/
│       └── nginx/
│           ├── tasks/
│           │   └── main.yml
│           ├── templates/
│           │   └── nginx.conf.j2
│           ├── vars/
│           │   └── main.yml
ansible-lab/
├── playbooks/
│   ├── install-nginx.yml
│   ├── vars.yml
│   ├── templates/
│   │   └── nginx.conf.j2
</code></pre></div></div>

<h3 id="templatesnginxconfj2">templates/nginx.conf.j2</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
  worker_connections 768;
}

http {
  sendfile on;
  tcp_nopush on;
  types_hash_max_size 2048;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name ;

    location / {
      return 200 "Hello from \n";
    }
  }
}
</code></pre></div></div>

<h3 id="install-nginxyml-템플릿-적용-추가">install-nginx.yml (템플릿 적용 추가)</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Install nginx and apply custom config
  hosts: targets
  become: yes
  vars_files:
    - /vagrant/playbooks/vars.yml
  tasks:
    - name: Install nginx
      apt:
        name: ""
        state: present
        update_cache: yes
      notify: Restart nginx

    - name: Deploy nginx config file from template
      template:
        src: /vagrant/playbooks/templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
      notify: Restart nginx

    - name: Ensure nginx is enabled and running
      service:
        name: ""
        state: started
        enabled: yes

  handlers:
    - name: Restart nginx
      service:
        name: ""
        state: restarted
</code></pre></div></div>

<h3 id="-실행-명령어-2">▶ 실행 명령어</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /vagrant/playbooks

ansible-playbook /vagrant/playbooks/install-nginx.yml
</code></pre></div></div>

<h3 id="확인-방법">확인 방법</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m command -a "curl http://localhost"
</code></pre></div></div>

<p>→ 출력 결과 예시: <code class="language-plaintext highlighter-rouge">Hello from node1</code>, <code class="language-plaintext highlighter-rouge">Hello from node2</code></p>

<blockquote>
  <p>템플릿의 inventory_hostname 변수는 Ansible이 자동으로 제공하는 호스트 이름입니다.</p>

</blockquote>

<hr />

<hr />

<h2 id="4-role-구조로-nginx-구성-자동화">4. Role 구조로 Nginx 구성 자동화</h2>

<h3 id="role이란">Role이란?</h3>

<p>Ansible에서 <strong>Role</strong>은 플레이북을 역할 기반으로 분리하고 재사용할 수 있도록 구성한 <strong>디렉토리 구조</strong>입니다.</p>

<ul>
  <li>작업을 <code class="language-plaintext highlighter-rouge">tasks</code>, 변수는 <code class="language-plaintext highlighter-rouge">vars</code>, 템플릿은 <code class="language-plaintext highlighter-rouge">templates</code> 폴더 등으로 구분</li>
  <li>유지보수와 협업에 유리하며, 여러 프로젝트에서 재사용 가능</li>
  <li><code class="language-plaintext highlighter-rouge">ansible-galaxy init</code> 명령으로 쉽게 생성 가능</li>
</ul>

<h3 id="디렉토리-구조-예시-2">디렉토리 구조 예시</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-lab/
├── roles/
│   └── nginx/
│       ├── tasks/
│       │   └── main.yml
│       ├── templates/
│       │   └── nginx.conf.j2
│       ├── vars/
│       │   └── main.yml
</code></pre></div></div>

<h3 id="-role-생성-명령어">▶ Role 생성 명령어</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /vagrant/playbooks
ansible-galaxy init roles/nginx
</code></pre></div></div>

<h2 id="ansible-galaxy-명령어"><code class="language-plaintext highlighter-rouge">ansible-galaxy</code> 명령어</h2>

<table>
  <thead>
    <tr>
      <th>기능</th>
      <th>명령 예시</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Role 생성</strong></td>
      <td><code class="language-plaintext highlighter-rouge">ansible-galaxy init roles/nginx</code></td>
      <td>로컬에서 사용할 역할 구조 생성</td>
    </tr>
    <tr>
      <td><strong>Role 설치</strong></td>
      <td><code class="language-plaintext highlighter-rouge">ansible-galaxy install geerlingguy.nginx</code></td>
      <td>Ansible Galaxy에서 Role 다운로드</td>
    </tr>
    <tr>
      <td><strong>Role 목록 확인</strong></td>
      <td><code class="language-plaintext highlighter-rouge">ansible-galaxy list</code></td>
      <td>설치된 Role 확인</td>
    </tr>
    <tr>
      <td><strong>Role 제거</strong></td>
      <td><code class="language-plaintext highlighter-rouge">ansible-galaxy remove &lt;role_name&gt;</code></td>
      <td>Role 삭제</td>
    </tr>
  </tbody>
</table>

<h3 id="rolesnginxvarsmainyml">roles/nginx/vars/main.yml</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nginx_package: nginx
nginx_service: nginx
</code></pre></div></div>

<h3 id="rolesnginxtemplatesnginxconfj2">roles/nginx/templates/nginx.conf.j2</h3>

<p>(앞서 사용한 Jinja2 템플릿 그대로 사용)</p>

<h3 id="rolesnginxtasksmainyml">roles/nginx/tasks/main.yml</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Install nginx
  apt:
    name: ""
    state: present
    update_cache: yes
  notify: Restart nginx

- name: Deploy nginx config file from template
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  notify: Restart nginx

- name: Ensure nginx is enabled and running
  service:
    name: ""
    state: started
    enabled: yes
</code></pre></div></div>

<h3 id="rolesnginxhandlersmainyml">roles/nginx/handlers/main.yml</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Restart nginx
  service:
    name: ""
    state: restarted
</code></pre></div></div>

<h3 id="playbooksnginx-roleyml">playbooks/nginx-role.yml</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
- name: Configure nginx using role
  hosts: targets
  become: yes
  roles:
    - nginx
</code></pre></div></div>

<h3 id="-실행-명령어-3">▶ 실행 명령어</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook /vagrant/playbooks/nginx-role.yml
</code></pre></div></div>

<h3 id="결과-확인-1">결과 확인</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible targets -m command -a "curl http://localhost"
</code></pre></div></div>

<p>→ 출력 결과: <code class="language-plaintext highlighter-rouge">Hello from node1</code>, <code class="language-plaintext highlighter-rouge">Hello from node2</code></p>]]></content><author><name>Start Bootstrap</name></author><category term="ansible" /><summary type="html"><![CDATA[1. 플레이북으로 Nginx 설치 자동화]]></summary></entry><entry><title type="html">Man must explore, and this is exploration at its greatest</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/31/man-must-explore.html" rel="alternate" type="text/html" title="Man must explore, and this is exploration at its greatest" /><published>2020-01-31T23:45:13+09:00</published><updated>2020-01-31T23:45:13+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/31/man-must-explore</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/31/man-must-explore.html"><![CDATA[<p>Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.</p>

<p>Science cuts two ways, of course; its products can be used for both good and evil. But there's no turning back from science. The early warnings about technological dangers also come from science.</p>

<p>What was most significant about the lunar voyage was not that man set foot on the Moon but that they set eye on the earth.</p>

<p>A Chinese tale tells of some men sent to harm a young girl who, upon seeing her beauty, become her protectors rather than her violators. That's how I felt seeing the Earth for the first time. I could not help but love and cherish her.</p>

<p>For those who have seen the Earth from space, and for the hundreds and perhaps thousands more who will, the experience most certainly changes your perspective. The things that we share in our world are far more valuable than those which divide us.</p>

<h2 class="section-heading">The Final Frontier</h2>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<blockquote class="blockquote">The dreams of yesterday are the hopes of today and the reality of tomorrow. Science has not yet mastered prophecy. We predict too much for the next year and yet far too little for the next ten.</blockquote>

<p>Spaceflights cannot be stopped. This is not the work of any one man or even a group of men. It is a historical process which mankind is carrying out in accordance with the natural laws of human development.</p>

<h2 class="section-heading">Reaching for the Stars</h2>

<p>As we got further and further away, it [the Earth] diminished in size. Finally it shrank to the size of a marble, the most beautiful you can imagine. That beautiful, warm, living object looked so fragile, so delicate, that if you touched it with a finger it would crumble and fall apart. Seeing this has to change a man.</p>

<img class="img-fluid" src="https://source.unsplash.com/Mn9Fa_wQH-M/800x450" alt="Demo Image">
<span class="caption text-muted">To go places and do things that have never been done before – that’s what living is all about.</span>

<p>Space, the final frontier. These are the voyages of the Starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</p>

<p>As I stand out here in the wonders of the unknown at Hadley, I sort of realize there’s a fundamental truth to our nature, Man must explore, and this is exploration at its greatest.</p>

<p>Placeholder text by <a href="http://spaceipsum.com/">Space Ipsum</a>. Photographs by <a href="https://unsplash.com/">Unsplash</a>.</p>]]></content><author><name>Start Bootstrap</name></author><summary type="html"><![CDATA[Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.]]></summary></entry><entry><title type="html">I believe every human has a finite number of heartbeats. I don’t intend to waste any of mine.</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/31/heartbeats.html" rel="alternate" type="text/html" title="I believe every human has a finite number of heartbeats. I don’t intend to waste any of mine." /><published>2020-01-31T12:45:13+09:00</published><updated>2020-01-31T12:45:13+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/31/heartbeats</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/31/heartbeats.html"><![CDATA[<p>Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.</p>

<p>Science cuts two ways, of course; its products can be used for both good and evil. But there's no turning back from science. The early warnings about technological dangers also come from science.</p>

<p>What was most significant about the lunar voyage was not that man set foot on the Moon but that they set eye on the earth.</p>

<p>A Chinese tale tells of some men sent to harm a young girl who, upon seeing her beauty, become her protectors rather than her violators. That's how I felt seeing the Earth for the first time. I could not help but love and cherish her.</p>

<p>For those who have seen the Earth from space, and for the hundreds and perhaps thousands more who will, the experience most certainly changes your perspective. The things that we share in our world are far more valuable than those which divide us.</p>

<h2 class="section-heading">The Final Frontier</h2>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<blockquote class="blockquote">The dreams of yesterday are the hopes of today and the reality of tomorrow. Science has not yet mastered prophecy. We predict too much for the next year and yet far too little for the next ten.</blockquote>

<p>Spaceflights cannot be stopped. This is not the work of any one man or even a group of men. It is a historical process which mankind is carrying out in accordance with the natural laws of human development.</p>

<h2 class="section-heading">Reaching for the Stars</h2>

<p>As we got further and further away, it [the Earth] diminished in size. Finally it shrank to the size of a marble, the most beautiful you can imagine. That beautiful, warm, living object looked so fragile, so delicate, that if you touched it with a finger it would crumble and fall apart. Seeing this has to change a man.</p>

<img class="img-fluid" src="https://source.unsplash.com/Mn9Fa_wQH-M/800x450" alt="Demo Image">
<span class="caption text-muted">To go places and do things that have never been done before – that’s what living is all about.</span>

<p>Space, the final frontier. These are the voyages of the Starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</p>

<p>As I stand out here in the wonders of the unknown at Hadley, I sort of realize there’s a fundamental truth to our nature, Man must explore, and this is exploration at its greatest.</p>

<p>Placeholder text by <a href="http://spaceipsum.com/">Space Ipsum</a>. Photographs by <a href="https://unsplash.com/">Unsplash</a>.</p>]]></content><author><name>Start Bootstrap</name></author><summary type="html"><![CDATA[Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.]]></summary></entry><entry><title type="html">Science has not yet mastered prophecy</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/30/prophecy.html" rel="alternate" type="text/html" title="Science has not yet mastered prophecy" /><published>2020-01-30T12:45:13+09:00</published><updated>2020-01-30T12:45:13+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/30/prophecy</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/30/prophecy.html"><![CDATA[<p>Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.</p>

<p>Science cuts two ways, of course; its products can be used for both good and evil. But there's no turning back from science. The early warnings about technological dangers also come from science.</p>

<p>What was most significant about the lunar voyage was not that man set foot on the Moon but that they set eye on the earth.</p>

<p>A Chinese tale tells of some men sent to harm a young girl who, upon seeing her beauty, become her protectors rather than her violators. That's how I felt seeing the Earth for the first time. I could not help but love and cherish her.</p>

<p>For those who have seen the Earth from space, and for the hundreds and perhaps thousands more who will, the experience most certainly changes your perspective. The things that we share in our world are far more valuable than those which divide us.</p>

<h2 class="section-heading">The Final Frontier</h2>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<blockquote class="blockquote">The dreams of yesterday are the hopes of today and the reality of tomorrow. Science has not yet mastered prophecy. We predict too much for the next year and yet far too little for the next ten.</blockquote>

<p>Spaceflights cannot be stopped. This is not the work of any one man or even a group of men. It is a historical process which mankind is carrying out in accordance with the natural laws of human development.</p>

<h2 class="section-heading">Reaching for the Stars</h2>

<p>As we got further and further away, it [the Earth] diminished in size. Finally it shrank to the size of a marble, the most beautiful you can imagine. That beautiful, warm, living object looked so fragile, so delicate, that if you touched it with a finger it would crumble and fall apart. Seeing this has to change a man.</p>

<img class="img-fluid" src="https://source.unsplash.com/Mn9Fa_wQH-M/800x450" alt="Demo Image">
<span class="caption text-muted">To go places and do things that have never been done before – that’s what living is all about.</span>

<p>Space, the final frontier. These are the voyages of the Starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</p>

<p>As I stand out here in the wonders of the unknown at Hadley, I sort of realize there’s a fundamental truth to our nature, Man must explore, and this is exploration at its greatest.</p>

<p>Placeholder text by <a href="http://spaceipsum.com/">Space Ipsum</a>. Photographs by <a href="https://unsplash.com/">Unsplash</a>.</p>]]></content><author><name>Start Bootstrap</name></author><summary type="html"><![CDATA[Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.]]></summary></entry><entry><title type="html">Failure is not an option</title><link href="http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/29/exploration.html" rel="alternate" type="text/html" title="Failure is not an option" /><published>2020-01-29T12:45:13+09:00</published><updated>2020-01-29T12:45:13+09:00</updated><id>http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/29/exploration</id><content type="html" xml:base="http://localhost:4000/startbootstrap-clean-blog-jekyll/2020/01/29/exploration.html"><![CDATA[<p>Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.</p>

<p>Science cuts two ways, of course; its products can be used for both good and evil. But there's no turning back from science. The early warnings about technological dangers also come from science.</p>

<p>What was most significant about the lunar voyage was not that man set foot on the Moon but that they set eye on the earth.</p>

<p>A Chinese tale tells of some men sent to harm a young girl who, upon seeing her beauty, become her protectors rather than her violators. That's how I felt seeing the Earth for the first time. I could not help but love and cherish her.</p>

<p>For those who have seen the Earth from space, and for the hundreds and perhaps thousands more who will, the experience most certainly changes your perspective. The things that we share in our world are far more valuable than those which divide us.</p>

<h2 class="section-heading">The Final Frontier</h2>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<blockquote class="blockquote">The dreams of yesterday are the hopes of today and the reality of tomorrow. Science has not yet mastered prophecy. We predict too much for the next year and yet far too little for the next ten.</blockquote>

<p>Spaceflights cannot be stopped. This is not the work of any one man or even a group of men. It is a historical process which mankind is carrying out in accordance with the natural laws of human development.</p>

<h2 class="section-heading">Reaching for the Stars</h2>

<p>As we got further and further away, it [the Earth] diminished in size. Finally it shrank to the size of a marble, the most beautiful you can imagine. That beautiful, warm, living object looked so fragile, so delicate, that if you touched it with a finger it would crumble and fall apart. Seeing this has to change a man.</p>

<img class="img-fluid" src="https://source.unsplash.com/Mn9Fa_wQH-M/800x450" alt="Demo Image">
<span class="caption text-muted">To go places and do things that have never been done before – that’s what living is all about.</span>

<p>Space, the final frontier. These are the voyages of the Starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</p>

<p>As I stand out here in the wonders of the unknown at Hadley, I sort of realize there’s a fundamental truth to our nature, Man must explore, and this is exploration at its greatest.</p>

<p>Placeholder text by <a href="http://spaceipsum.com/">Space Ipsum</a>. Photographs by <a href="https://unsplash.com/">Unsplash</a>.</p>]]></content><author><name>Start Bootstrap</name></author><summary type="html"><![CDATA[Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.]]></summary></entry></feed>